use std::io;
use std::net::TcpListener;
use std::panic;
use log::{info, error};

#[path = "router.rs"]
mod router;


pub fn run_webserver() {
    let listener = TcpListener::bind("0.0.0.0:8080").unwrap();
    listener
    .set_nonblocking(true)
    .expect("Cannot set non-blocking");
    for stream in listener.incoming() {
        match stream {
            Ok(s) => {
                // handle the connection
                let res = panic::catch_unwind(|| router::handle_request(s));
                if res.is_err() {
                    error!("error: {:?}", res);
                }
            }
            Err(ref e) if e.kind() == io::ErrorKind::WouldBlock => {                
                // on SIGTERM, we should exit
                error!("SIGTERM received, exiting");
                break;
            }
            Err(e) => panic!("encountered IO error: {}", e),
        }
    }

}